// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

type BloodTypes{
  Ap  Int @default(0)
  An  Int @default(0)
  Bp  Int @default(0)
  Bn  Int @default(0)
  ABp Int @default(0)
  ABn Int @default(0)
  Op  Int @default(0)
  On  Int @default(0)
}

type Coords{
  lat Float
  lng Float
}
type Address{
  street String
  city   String
  state  String
  zip    Int
}

type DOB{
  date Int
  month Int
  year Int
}

model BloodBanks {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  sessionUserId  String?     @db.ObjectId @unique
  user       User?         @relation(fields: [sessionUserId],references: [id])
  name        String
  bloodTypes  BloodTypes
  phone       Int        
  coordinates  Coords
  sectors     String?
  address     Address
  transaction Transaction[]

}


model Transaction{
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  bloodBank     BloodBanks @relation(fields: [bankId],references: [id])
  user          UsersModel      @relation(fields: [userId],references: [id])  
  bankId        String     @db.ObjectId
  userId        String     @db.ObjectId
  bloodType     String
  bloodQuantity Int
  fulfilled     Boolean
}

model UsersModel{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?          @db.ObjectId @unique
  user          User?           @relation(fields: [userId],references: [id])
  transaction   Transaction[]
  bloodType     String?
  bloodQuantity Int?
  name          String
  email         String
  phone         Int 
  UID           Int             @unique
  address       Address
  gender        String
  age           Int
  dob           DOB      
}

            //-----------------------------------------Authentication Models-------------------------------------------

enum Roles{
  ADMIN
  USER
  BloodBank
}
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Roles     
  accounts      Account[]
  sessions      Session[]
  users         UsersModel?
  payments      UserSubscription[]
  bloodBanks    BloodBanks?

  @@map("users")
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}


// --------------------------------Stripe--------------------------------
model UserSubscription {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  stripePriceId          String?   @map(name: "stripe_price_id")
  status String? @map(name: "status")
  users  User @relation(fields: [userId],references: [id])
}